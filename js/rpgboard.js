// Generated by CoffeeScript 1.4.0
var Die, ToolButton, config;

config = {
  root: "rpg:kampagnen",
  wiki: "http://wiki.ulzq.de/lib/plugins/jsonrpc/jsonrpc.php",
  "default": "Space_2013"
};

Die = (function() {

  function Die(eyes) {
    var _this = this;
    this.eyes = eyes;
    $("#dice ul").append("<li><button title=\"Roll a D" + this.eyes + "\" class=\"d" + this.eyes + "\"></button><input type=\"number\" value=\"1\" min=\"1\" max=\"5\" /><span></span></li>");
    this.me = $('#dice > ul > li').last();
    this.btn = this.me.find("button");
    this.amt = this.me.find("input");
    this.res = this.me.find("span");
    this.btn.on('click', function() {
      var a, ai, amt, b, dc, i, mx, r, _i;
      amt = _this.amt.val();
      a = [];
      r = 0;
      for (i = _i = 0; 0 <= amt ? _i < amt : _i > amt; i = 0 <= amt ? ++_i : --_i) {
        b = Math.ceil(Math.random() * _this.eyes);
        a.push(b);
        r += b;
      }
      mx = amt * _this.eyes;
      ai = a.join(", ");
      if (amt > 2) {
        ai += " =" + r + "/" + (amt * _this.eyes);
      }
      ai += ' = ' + (Math.round(r / mx * 100)) + "%";
      _this.res.html(ai);
      $("#dice li span").removeClass("rolled");
      _this.res.addClass("rolled");
      dc = amt < 2 ? 'D' + _this.eyes : amt + "D" + _this.eyes;
      if (!Api.send({
        dice: {
          eyes: dc,
          vals: a,
          result: ai
        }
      })) {
        return Api.log(dc, result, 5);
      }
    });
  }

  return Die;

})();

ToolButton = (function() {

  function ToolButton(opts) {
    this.name = opts.name, this.image = opts.image, this.title = opts.title, this.tooltip = opts.tooltip, this.click = opts.click;
    if (this.image == null) {
      this.image = this.name;
    }
    if (this.title == null) {
      this.title = this.name;
    }
    if (this.tooltip == null) {
      this.tooltip = this.name;
    }
    $("#toolbar").append("<button title=\"" + this.title + "\"><img src=\"img/" + this.image + ".svg\" />" + this.title + "</button>");
    $('#toolbar > button').last().click(this.click);
  }

  return ToolButton;

})();

$(document).ready(function() {
  var chat, i, _i, _len, _ref;
  _ref = [4, 6, 8, 10, 12, 20, 100];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    i = _ref[_i];
    new Die(i);
  }
  new ToolButton({
    name: "map",
    click: function() {
      return alert("please dont press this button again");
    }
  });
  new ToolButton({
    name: "login",
    image: "key",
    click: function() {
      return Api.list("", function(campaigns) {
        var c, camps;
        camps = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = campaigns.length; _j < _len1; _j++) {
            c = campaigns[_j];
            _results.push("<option>" + c + "</option>");
          }
          return _results;
        })();
        return Api.dialog({
          src: "<div class=\"dialog\" id=\"" + this.id + "\">\n  <h2>login</h2>\n  <button class=\"close\">X</button>\n  <label>Campaign</label><select>" + camps + "</select>\n  <label>User</label><input  type=\"text\" class=\"name\" />\n  <label>Password</label><input  type=\"password\" class=\"password\" />\n</div>",
          init: function() {
            var _this = this;
            this.name = this.frame.find(".name");
            this.pass = this.frame.find(".password");
            this.name.focus();
            this.name.on("keydown", function(e) {
              if (e.keyCode === 13) {
                return _this.pass.focus();
              }
            });
            return this.pass.on("keydown", function(e) {
              var pass, user;
              if (e.keyCode === 13) {
                user = _this.name.val();
                pass = _this.pass.val();
                return Api.login(user, pass, function(result) {
                  if (result) {
                    Api.log("login as", user, 2);
                    Api.name = user;
                    return _this.destroy();
                  } else {
                    _this.name.focus();
                    _this.name.effect("highlight", {}, 250);
                    return _this.pass.effect("highlight", {}, 250);
                  }
                });
              }
            });
          }
        });
      });
    }
  });
  new ToolButton({
    name: "settings",
    image: "prefs",
    click: function() {
      return alert("please dont press this button again, 4 real");
    }
  });
  new ToolButton({
    name: "log",
    click: function() {
      var log;
      log = $("#wgl");
      return log.css("display", log.css("display") === "none" ? "block" : "none");
    }
  });
  $("button").each(function(i, b) {
    b = $(b);
    return b.on("mouseover", function() {
      return Api.notice(b.attr("title"));
    });
  });
  chat = $("#chatinput");
  return chat.on("keydown", function(e) {
    if (e.keyCode === 13) {
      Api.send({
        msg: {
          text: chat.val()
        }
      });
      return chat.val('');
    }
  });
});
